---
layout: single
title:  "CNN model of Donkey"
date:   2018-06-11 00:05:00 +0100
categories: Software
author_profile: true
published: true
---
Donkey uses Convolutional Neural Network(CNN) to control the car.
The input of CNN is the image from the camera on Donkey car. The steering angle and throttle are the outputs of the CNN.
The CNN architecture is as below.
![model](/assets/images/CNN_model.png)
![model_diagram](/assets/images/model.png)
The input is 120x160 image with RGB channels.
It has five Convolution layers. The activation function is RELU.
Three of them use 5x5 kernel and 2 strides, one of them uses 3x3 kernel and
2 strides and one of them uses 3x3 kernel and 1 strides.
A fully connected layer follows to make it flat. This makes 100 flattened outputs. Following this layer, a dropout layer is implemented to cut 10% of neurons in order to avoid overfitting.
Another fully connected layer makes it 50 outputs. Again, here we have a dropout layer with 10% of dropout.
Finally for steering angle output, a fully connected layer makes the probabilities of 15 (15 categories) by using Softmax activation. This output is converted to a linear value using this formula.  
    a = b * (2/14) - 1  
a is the final steering output to the Donkey.  
b is the index of the array which has the max probability.  
0 <= b < 15. b represents the category which has the highest probability within 15 categories.

For example,  
if "b" is 7,  "a" becomes 0.0.  
If "b" is 0,  "a" becomes -1.0.  
If "b" is 14, "a" becomes 1.0.  
If "b" is 3,  "a" becomes -0.5714285714285714  
if "b" is 10, "a" becomes 0.4285714285714284    
This way, the angle value becomes within the range from -1.0 to 1.0.  

The throttle value is made from a fully connected layer which makes linear output by using RELU activation function.

This Stanford University web page explains pretty well how Convolution neural network works. [Stanford University CS231 n Convolutional Neural Networks (CNNs / ConvNets)](http://cs231n.github.io/convolutional-networks/)
